package main

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"net/http/httptest"
	"os"
	"strings"
	"sync"
	"testing"
)

// Create a single HTTP client for all requests
var client = &http.Client{}

func TestMainFunction(t *testing.T) {
	// Mock HTTP server
	server := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		data := ""
		switch r.URL.String() {
		case "/foo.com":
			data = `{"data":"foo"}`
		case "/bar.com":
			data = `{"data":"bar"}`
		default:
			data = `{"data":"unknown"}`
		}
		w.Header().Set("Content-Type", "application/json")
		fmt.Fprintln(w, data)
	}))
	defer server.Close()

	// Create a temporary input file
	inputData := fmt.Sprintf(`{"location": "%s"}`+"\n"+`{"location": "%s"}`+"\n", server.URL+"/foo.com", server.URL+"/bar.com")
	tmpfile, err := os.CreateTemp("", "input.txt")
	if err != nil {
		t.Fatal(err)
	}
	defer os.Remove(tmpfile.Name()) // Clean up after test

	if _, err := tmpfile.Write([]byte(inputData)); err != nil {
		t.Fatal(err)
	}
	if err := tmpfile.Close(); err != nil {
		t.Fatal(err)
	}

	// Override the default input file name
	oldArgs := os.Args
	defer func() { os.Args = oldArgs }()
	os.Args = []string{oldArgs[0], tmpfile.Name()}

	// Capture output
	oldOut := os.Stdout
	r, w, _ := os.Pipe()
	os.Stdout = w

	go func() {
		main()
		w.Close()
	}()

	out, _ := io.ReadAll(r)
	os.Stdout = oldOut

	// Check for the expected output
	expectedOutput := "data found: foo\n"
	if !strings.Contains(string(out), expectedOutput) {
		t.Errorf("expected %q to be in output %q", expectedOutput, string(out))
	}
}
