package main

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"strings"
	"sync"
)

// Create a single HTTP client for all requests
var client = &http.Client{}

func main() {
	// Error 1: Proper error handling for file reading
	data, err := os.ReadFile("./input.txt")
	if err != nil {
		log.Fatal(err)
	}

	lines := strings.Split(string(data), "\n")
	var wg sync.WaitGroup
	errs := make(chan error) // Channel to handle errors
	found := make(chan string, 1) // Channel to handle discovery of "foo"

	// Create a cancellable context
	ctx, cancel := context.WithCancel(context.Background())
	defer cancel() // Ensure the context is cancelled when we're done

	for _, line := range lines {
		if line == "" {
			continue
		}
		wg.Add(1)
		go func(line string) {
			defer wg.Done()
			// Error 2: Anonymous goroutines need synchronization
			data, err := getData(ctx, line) // Pass the context to getData
			if err != nil {
				errs <- err // Send errors to the errs channel
				return
			}
			// Error 3: Exit call within goroutine can terminate the program prematurely
			if data == "foo" {
				select {
				case found <- data:
				default:
				}
			}
		}(line) // Error 4: Pass the loop variable correctly to the goroutine
	}

	go func() {
		wg.Wait() // Wait for all goroutines to finish
		close(found) // Close the channels after all goroutines complete
		close(errs)
	}()

	// Handle results from channels
	for {
		select {
		case result, ok := <-found:
			if ok {
				fmt.Printf("data found: %s\n", result)
				cancel() // Cancel the context when we've found the data
			}
		case err, ok := <-errs:
			if ok {
				log.Printf("error: %v", err) // Log errors
			}
		case <-ctx.Done():
			return // Exit the loop when the context is cancelled
		}
	}
}

func getData(ctx context.Context, line string) (string, error) {
	var location struct {
		URL string `json:"location"`
	}
	// Error 5: Improper handling of JSON unmarshaling errors
	if err := json.Unmarshal([]byte(line), &location); err != nil {
		return "", err
	}

	// Error 6: Context not utilized properly
	req, err := http.NewRequestWithContext(ctx, http.MethodGet, location.URL, nil)
	if err != nil {
		return "", err
	}

	// Use the shared HTTP client
	res, err := client.Do(req)
	if err != nil {
		return "", err
	}
	defer res.Body.Close() // Error 7: Response body should be closed after reading

	// Decode JSON directly from the response body
	var payload struct {
		Data string `json:"data"` // Error 8: Use proper JSON tag (not BSON)
	}
	if err := json.NewDecoder(res.Body).Decode(&payload); err != nil {
		return "", err
	}

	return payload.Data, nil
}
